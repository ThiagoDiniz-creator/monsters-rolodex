{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","phone","key","CardList","monsters","map","SearchBox","type","placeholder","handleChange","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","filteredMonsters","this","filter","toLowerCase","includes","updateList","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yUAOaA,EAAO,SAACC,GACnB,OACE,sBAAKC,UAAU,iBAAf,UACE,qBACEC,IAAI,UACJC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BAEL,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,QAClB,4BAAIP,EAAMI,QAAQI,UAPiBR,EAAMI,QAAQK,MCC1CC,EAAW,SAACV,GACvB,OACE,qBAAKC,UAAU,YAAf,SACGD,EAAMW,SAASC,KAAI,SAACR,GAAD,OAClB,cAAC,EAAD,CAAMA,QAASA,QAFaJ,EAAMK,KCN7BQ,G,MAAY,SAAC,GAA6C,IAA3CR,EAA0C,EAA1CA,GAAIS,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aACjD,OACE,8BACE,uBACEf,UAAU,SAEVa,KAAMA,EACNC,YAAaA,EACbE,SAAUD,GAHLX,OC8CEa,E,kDAhDb,aAAe,IAAD,8BACZ,gBAiBFF,aAAe,SAACG,GACd,EAAKC,SAAS,CACZC,YAAaF,EAAEG,OAAOC,SAjBxB,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IALH,E,qDASd,WAAqB,IAAD,OAElBI,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OACJ,EAAKT,SAAS,CAAET,SAAUkB,EAAOC,iBAAkBD,S,wBAUzD,WAAc,IAAD,EACuBE,KAAKP,MAA/Bb,EADG,EACHA,SAAUU,EADP,EACOA,YAIlB,OAHyBV,EAASqB,QAAO,SAACrB,GACxC,OAAOA,EAASL,KAAK2B,cAAcC,SAASb,EAAYY,oB,oBAK5D,WAAU,IAAD,OACDH,EAAmBC,KAAKI,aAC9B,OACE,sBAAKlC,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CACEe,aAAc,SAACG,GAAD,OAAO,EAAKH,aAAaG,IACvCJ,YAAY,uBACZD,KAAK,WAEP,cAAC,EAAD,CAAUH,SAAUmB,W,GA3CVM,IAAMC,WCITC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.9af071ea.chunk.js","sourcesContent":["//Essential imports\nimport React from \"react\";\n\n//Styles\nimport \"../card/card.styles.css\";\n\n//Card component\nexport const Card = (props) => {\n  return (\n    <div className=\"card-container\" key={props.monster.key}>\n      <img\n        alt=\"Monster\"\n        src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}\n      ></img>\n      <h2>{props.monster.name}</h2>\n      <p>{props.monster.email}</p>\n      <p>{props.monster.phone}</p>\n    </div>\n  );\n};\n","//Essential imports\nimport React from \"react\";\n\n//Styles\nimport \"./card-list.styles.css\";\n\n//Components\nimport { Card } from \"../card/card.component\";\n\n//CardList component\nexport const CardList = (props) => {\n  return (\n    <div className=\"card-list\" key={props.id}>\n      {props.monsters.map((monster) => (\n        <Card monster={monster} />\n      ))}\n    </div>\n  );\n};\n","//Essential import\nimport React from \"react\";\n\n//Stylesheet\nimport \"./search-box.styles.css\";\n\nexport const SearchBox = ({ id, type, placeholder, handleChange }) => {\n  return (\n    <div>\n      <input\n        className=\"search\"\n        key={id}\n        type={type}\n        placeholder={placeholder}\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"./App.css\";\n\n//Components\nimport { CardList } from \"./components/card-list/card-list.component\";\nimport { SearchBox } from \"./components/search-box/search-box.component\";\n\n//App\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField: \"\",\n    };\n  }\n\n  componentDidMount() {\n    //When the components are loaded this function is called\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => response.json())\n      .then((users) =>\n        this.setState({ monsters: users, filteredMonsters: users })\n      );\n  }\n\n  handleChange = (e)  => {\n    this.setState({\n      searchField: e.target.value,\n    });\n  }\n\n  updateList() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter((monsters) => {\n      return monsters.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n    return filteredMonsters;\n  }\n\n  render() {\n    const filteredMonsters = this.updateList();\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox\n          handleChange={(e) => this.handleChange(e)}\n          placeholder=\"Search for a monster\"\n          type=\"search\"\n        />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}